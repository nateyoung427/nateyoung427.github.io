<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java Never Sleep YouTube频道开通啦！天天向上～]]></title>
    <url>%2FYouTube-Channel-is-Ready-Day-Day-Up-Java-Warrior-and-Tank-War%2F</url>
    <content type="text"><![CDATA[Java Never Sleep YouTube频道开通啦！经过N多朋友鼎力相助，24小时内搞定了100个Subscriber，专属地址已经申请下来：https://www.youtube.com/JavaNeverSleep 。欢迎访问、订阅、点赞、评论～🤝 目前总计有三个播放列表，值得一提的是，“天天向上”今日刚刚开通： 天天向上 天天向上，是件知易行难的事情。从6月11日开始的100天内，我计划每天上传一个或干货、或搞笑、或扯淡的视频，最低限度，这视频能让自己和听众受益，真正作到天天向上。 百日维新，天天向上～🙏 放码过来！作个Java实战派 放码过来！新版Java坦克大战]]></content>
      <categories>
        <category>YouTube</category>
      </categories>
      <tags>
        <tag>YouTube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“放码过来！新版Java坦克大战”课程大纲]]></title>
    <url>%2FUdemy-Course-Show-me-the-Code-Java-Tank-War-Curriculum%2F</url>
    <content type="text"><![CDATA[一个项目，整合Java企业级开发必须技能：选型考量、开发工具（IDEA）、版本管理（GIT）、持续构建（CI）、单元测试（JUNIT）、重构（Refactoring）、设计模式（Design Pattern）、并发编程…一个都不能少。全面超越老版尚学堂坦克大战！您可以通过限量折扣码CSDNDEMO免费获取完整课程内容，或通过折扣码JAVA-NEVER-SLEEP享受两折优惠。 通过本课程您可以学习、了解： Java开发业界最佳实践 如何编写清晰、简洁、高效代码 熟练使用Maven构建工具 熟练应用重构手法和单元测试 独立设计、规划、开发中小型规模项目 了解开发环境、测试自动化流程 Section 1: 热身赛 JDK、开发工具，如何选？选择JDK、开发工具简单吗？不简单！我们不做印象派，我们通过客观的数据和调查结果来作出最为理性、稳妥的选择，与此同时，我们也在个人研究、学习中勇于尝试新鲜事物，为未来的选择做好准备。 开发环境搭建，怎么自动化？复杂开发环境的搭建、自动化开发环境搭建，告别刀耕火种，不再点击狂魔。 放码过来：热身我们从一个简单的寻找最大、最小数字程序开始起步，介绍两种测试方法，并说明可改进之处。 放码过来：初探单元测试我们开始一个稍有难度的程序编写，并初步介绍如何使用JUNIT5来测试我们的代码，与此同时，我们也衡量我们代码的单元测试覆盖率。 放码过来：为牛正名我们尝试编写一个稍有难度的程序：USACO上面的一个练习，为牛正名。 放码过来：为牛正名继续改进我们观察如何不断改进我们的程序，以及如何评估改动的代价和回报，我们也能看到面对意外，老司机不小心翻车之后如何及时找到Bug并解决。 放码过来：为牛正名补充说明关于文件写入操作，flush以及try with resources的补充说明。 Section 2: 坦克大战 新版新版，新在何处？开门见山，我们对比广为流传的尚学堂马士兵老师版本，说明这一版本新在何处。 以终为始：项目演示Begin with end in mind。我们先了解目标和终点，再回到起点开始。 分而治之：项目规划我们以尽可能最简化的方式去规划项目，不引入不必要的复杂度和管理成本。 创建项目Repository并进行版本管理使用Github创建repository，版本管理让我们有备无患，安心上路。 警惕拼写错误类Bug！不小心打错一个字母引发的悲剧，如何避免此类悲剧重演？我们需要在方法论层面进行思考和改进。 移动坦克：上下左右 移动坦克：八个方向 加入敌方坦克 加入围墙 添加第一个单元测试 加入碰撞检测 Ready？Fire！让坦克可以开火 开火怎能没有声音？ 超级发射！八个方向！ 重构方向枚举类 重构移动方法 子弹与围墙、坦克的交互 敌方坦克团灭之后就地复活 加入爆炸图片、声音效果 实现Game Over和Restart 加入游戏得分显示 加入两棵树、宠物骆驼和急救包 关于存档功能的设计 基于FastJSON实现存档功能 使用位运算简化方向判定一个数字，八个方向，清清爽爽，优雅简洁。使用四个甚至更多状态变量来切换的痛苦和纠结，不会再有了。 集成Travis和CodeCov构建、运行测试永不打盹永不睡觉！这是工作方式调整的一小步，却是项目质量提高改进的一大步。 使用exe4j生成Windows可执行文件提高用户体验第一步：可执行文件。 使用install4j生成Windows安装包文件提高用户体验第二步：傻瓜安装包。带着对小白用户的深情厚爱，我们用心点下Build按钮。 Section 3 总结复盘 总结与新的开始：力扣超人！我SHOW了我的CODE，现在，轮到您来SHOW了：寻找力扣周赛中的超人们。 致谢与鼓励 Not everyone can be a great programmer,but everyone can be a programmer,and make a difference! Now it’s your time to make a difference. amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "true"; amzn_assoc_tracking_id = "javaneversleep-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "7006aa2cdd12ccf1fc87222b384c9e00"; amzn_assoc_asins = "B01NBEQCA1,0596517335,0201485672,1787285731";]]></content>
      <categories>
        <category>Udemy教程</category>
      </categories>
      <tags>
        <tag>Udemy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“放码过来！作个Java实战派”Udemy良心课程免费放送！]]></title>
    <url>%2FUdemy-Free-Course-Show-Me-the-Code-Java-Warrior-Part-I-Released%2F</url>
    <content type="text"><![CDATA[昨天，我把“放码过来！作个Java实战派”课程在Udemy上面设为永久免费，也将对应课程放到了YouTube对应频道Java Never Sleep，欢迎访问和订阅！这是一款深度广度胜过N多收费课程的良心课程，您要觉得我在自吹自擂，请听我细细道来。 这门课程的特点在于并不追求所有知识点的完整罗列，而是基于28原则，集中发力于最常用的工作技能，并对部分内容进行深入展开。辅以高强度的编程练习，覆盖其他需要的知识点。 比如当我阐述面向对象概念时，我并不直接引入复杂概念，而是先从一个小游戏开始： 比如我在讲解常用数据结构时，从一个待解决的问题“双城记词频统计问题”入手，逐个引入不同集合，并说明其使用场景。最后，我对集合类库进行完整的梳理，通过实时生成的类图对其结构一览无余。 以序章为例，恐怕我是极少数直接使用JShell进行Hello World讲解的特例，实际上，从JDK9引入JShell之后，很多人对这一工具所带来的便利还有基本认识。所以，在“首次Hello World”中，其安排是这样的： 终于，我们开始安装JDK(12.0.1)、编写Hello World。在JDK12中，我们优先通过JShell运行Hello World，当然，我们也介绍古典Hello World的编写、编译、运行三部曲。 然后为了说明以JVM为核心的Java生态系统思想，我对Hello World也进行了再次跟进，甚至包括一个基于Kotlin的Hello World。 我们继续Hello World：我们介绍手工编译运行时需要注意的细节、自JDK 11之后引入的直接运行Single Source、在其他操作系统上运行Hello World、用JVM系编程语言之一的Kotlin来Hello World、用Eclipse编译器来Hello World。一沙一世界，我们后面还要三番四次Hello World，因为它绝不如大家看到、想象的那般简单。 好了，Talk is Cheap，您前去观看，自有分晓。如果您对这款课程有任何疑问或反馈意见，都可以通过本站各种联系方式骚扰我。如果您觉得课程不错，记得给我来个好评😅 此外，我在Udemy上面也发布了一款项目开发驱动的课程“放码过来！新版Java坦克大战”，您可以通过折扣码JAVANEVERSLEEP享受限时2折优惠，别错过时间了哈😁]]></content>
      <categories>
        <category>Udemy教程</category>
      </categories>
      <tags>
        <tag>Udemy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My First Udemy Course: Tank War in Java Published!]]></title>
    <url>%2FFirst-Udemy-Course-Tank-War-in-Java-Published%2F</url>
    <content type="text"><![CDATA[Just published my first course “Show Me the Code! Tank War in Java” in Udemy! It’s avaiable for free access till April 28 with coupon code EASTER2019. Wanna have a try, man? It was approved and published at April 18. Till now there are 30 students enrolled via the free coupon, 2 Five-Star ratings were received. It’s not as good as I expected, but at least I made the first step as planned in the beginning of this year. In the next post I will try to summarize the first quarter of my work and effort put into this course and the “Java Never Sleep” project.]]></content>
      <categories>
        <category>Udemy</category>
      </categories>
      <tags>
        <tag>Udemy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup MOOC OOP Java Development Environment]]></title>
    <url>%2FHow-to-Setup-MOOC-Development-Environment%2F</url>
    <content type="text"><![CDATA[MOOC by University of Helsinki was said to be good and was actually very good. If you are a Java beginner who is searching for well-organized exercises, it won’t disappoint you. Object-Oriented Programming with Java Part I and Part II. Register an account at Test My Code. Set up the development environment. Finish all the exercises there. That’s all. However, many beginners would have difficulty in setting up development environment, and there are also some things you need to pay attention to. IDE SelectionI would highly recommend you install NetBeans 8.2 Java SE with TMC plugin for Part I exercises. You may also install TMC-Bundle version. For Part II exercises I suggest you using Intellij IDEA Community Edition. You need to install JDK first before NetBeans, it’s recommended to choose JDK8 or lower version for NetBeans installation. For IDEA, it’s not needed for installation but needed for development. For IDEA, remember to set language level to 1.6 or lower in project structure settings, as the TMC server side compile your code as 1.6. Without doing so you would pass all unit tests locally but failed at server side if you use some features not available in 1.6. Check the NetBeans project file and you would know why. Anytime you failed at server side, remember to check error details in submission page. Using ChocalateryRun cmd.exe as administrator and copy paste commands in the below, it will automatically install NetBeans 8.2 Java SE and IDEA Community edition. It’s much faster, but if you don’t feel comfortable with command line, then simply download, and click, click, and click. 123@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"cinst netbeans-jse intellijidea-community -y Follow instructions of plugin install would do the job. Since package netbeans-jse is dependent on jdk8, it will also install jdk8 automatically if it’s not available. Attention!Your NetBeans might not work as expected due to the selection of JDK version not supported. In that case, you need to edit the configuration file and change JDK home for NetBeans manually. You can access all projects in NetBeans at the same time and work on multiple projects easily, however in IDEA you can do one exercise at one time, and need to switch project then, as Part I exercise are usually small, it’s really a little bit painful to switch projects too frequently, you know, IDEA is awesome but a little bit slow and heavyweight. Make sure you pass all local tests first, but this doesn’t mean you will pass server-side tests. For example, if you use System.exit(0) in your main method, you would fail at Server side - one of my students uses this and is very confusing why server-side failed. Make sure your output is exactly the same as expected, it’s very strict, even some words are very simple, don’t type them directly, always Copy+Paste them to avoid spelling mistakes. You can Click Run -&gt; Test Project, or right-click the project and choose Test, or click the TMC button Run tests locally to perform local tests. I experienced Copy+Paste issue in NetBeans sometimes, the quickest workaround to resolve it is restarting NetBeans, you may find it’s necessary sometimes.]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>MOOC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[To See a World in a Grain of Sand: Once Again Hello World]]></title>
    <url>%2FTo-See-a-World-in-a-Grain-of-Sand-Once-Again-Hello-World%2F</url>
    <content type="text"><![CDATA[“To see a world in a grain of sand”, and we would probably see a world in the simplest “Hello World”, so here we go, once again we will say Hello to the World. I guess all of the Java courses, tutorials start from this famous Hello World program, and this is one of those very rare programs that I can write without IDE’s help:) 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World"); &#125;&#125; 1. Do you know these options of javac?After your first program was written you will execute the command below first to compile it, or you cannot run it. 1javac HelloWorld.java You would probably find that it’s not necessary to name the file “HelloWorld.java”, “Hello.java” also works. And public class HelloWorld also can be downgraded to class HelloWorld. If you are curious enough to press javac --help, you will see a lot of options regarding the Java compiler, for example, we want to print Chinese edition “Hello World” and expect it apply exactly to JDK8 language level, with metadata of parameter names included in, it will look like this: 1javac -encoding UTF-8 -source 8 -target 8 -parameters Hello.java You’ve got JDK11 installed, but using the command above you are releasing class files using 1.8 features only. If you have written some stuff only available from JDK9 on you would find it cannot compile as expected. 2. Basics of the class fileThere is a whole chapter regarding the class file format in Java Virtual Machine specification, do you want to explore it a little bit? You see the bytecodes(compiled with JDK11) start with a magical, mysterious “cafe babe” and following with a value of 55 and a lot of stuff would hurt your brain. Among them, “cafe babe” is the magic, 55 points to minor version, which is mapped to JDK11. Compared to read the awesome class file format, you can also use javap to retrieve information for that class file: 12# You would use javap -h to see how many options you havejavap -p -l -c -s -constants HelloWorld You will get things like this:123456789101112131415161718192021class HelloWorld &#123; HelloWorld(); descriptor: ()V Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object."&lt;init&gt;":()V 4: return LineNumberTable: line 1: 0 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #3 // String Hello World 5: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return LineNumberTable: line 4: 0 line 5: 8 &#125; You can see that the instructions here are somewhat similar to the source code, with the mappings of line number of source code and instruction numbers, you might be wondering, can I restore the source from these bunches of stuff? 3. De-CompilersYes, you can. There are many decompilers, but some of them are outdated for nowadays usage, such as JD-GUI, JAD and etc, they would not work well on class file compiled with latest JDK. You may still use them, but CFR would be more suitable. 1234567891011121314# java -jar cfr-0.139.jar HelloWorld.class/* * Decompiled with CFR 0.139. */ import java.io.PrintStream; class HelloWorld &#123; HelloWorld() &#123; &#125; public static void main(String[] arrstring) &#123; System.out.println("Hello World"); &#125; &#125; You might have found that there is a slight difference with the source code and the de-compiled code(constructor method added), actually, you might be surprised to see that sometimes the generated code seems to be modified upon the source code. However, many of them are optimization from JVM and usually gains performance improvement, comparing the difference is actually interesting and would give you many insights. 4. How can a final variable with null value initialized again?System.out.println(&quot;Hello World&quot;), System is a class and out is one of its static attributes with the final modifier: 1public final static PrintStream out = null; Then the problem comes, why the hack System.out.println(&quot;Hello World&quot;) won’t throw the famous NullPointerException, according to the language specification, it seems that the final static variable out is impossible to be assigned to a valid value again, right? Yes, it’s right in most of the cases if you don’t use the dirty reflection tricks and don’t introduce the native buddy. If you just want to play around, you would do like this:1234Field f = clazz.getDeclaredField("out");Field modifiersField = Field.class.getDeclaredField("modifiers");modifiersField.setAccessible(true);modifiersField.setInt(f, f.getModifiers() &amp; ~Modifier.FINAL); However, this gonna don’t work for System, the actual secret is hidden in these lines of code in System.java: 1234private static native void registerNatives();static &#123; registerNatives();&#125; As per the comments written above the method, “VM will invoke the initializeSystemClass method to complete the initialization for this class”, go to the method of initializeSystemClass and you will see these lines: 123456FileInputStream fdIn = new FileInputStream(FileDescriptor.in);FileOutputStream fdOut = new FileOutputStream(FileDescriptor.out);FileOutputStream fdErr = new FileOutputStream(FileDescriptor.err);setIn0(new BufferedInputStream(fdIn));setOut0(newPrintStream(fdOut, props.getProperty("sun.stdout.encoding")));setErr0(newPrintStream(fdErr, props.getProperty("sun.stderr.encoding"))); And you will also see these 3 native methods to set in and out: 123private static native void setIn0(InputStream in);private static native void setOut0(PrintStream out);private static native void setErr0(PrintStream err); So now you know that JVM does this stuff in OS level and “bypass” the final restriction, you would probably ask, where the hack is the OS level code that JVM will adapt with? So here it is System.c(JDK11 version). 123456789101112131415161718192021JNIEXPORT void JNICALLJava_java_lang_System_registerNatives(JNIEnv *env, jclass cls)&#123; (*env)-&gt;RegisterNatives(env, cls, methods, sizeof(methods)/sizeof(methods[0]));&#125;/* * The following three functions implement setter methods for * java.lang.System.&#123;in, out, err&#125;. They are natively implemented * because they violate the semantics of the language (i.e. set final * variable). */JNIEXPORT void JNICALLJava_java_lang_System_setIn0(JNIEnv *env, jclass cla, jobject stream)&#123; jfieldID fid = (*env)-&gt;GetStaticFieldID(env,cla,"in","Ljava/io/InputStream;"); if (fid == 0) return; (*env)-&gt;SetStaticObjectField(env,cla,fid,stream);&#125; Here you find the back door in the comments, “They are natively implemented because they violate the semantics of the language (i.e. set final variable)”. And then, you would find that it’s a really a long, long road. The journey will never stop. The End: Stop for a while “To see a world in a grain of sandAnd a Heaven in a Wild FlowerHold Infinity in the palm of your handAnd Eternity in an hour” If the simplest HelloWorld is just a grain of sand, surely there is a world within it, maybe you have said “Hello” to it numerous times, but it doesn’t mean that you have explored the world a little bit, maybe now it’s the time and explore in the world, while sand would get your hands dirty, flower doesn’t. amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "javaneversleep-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "21372c4acfda2c9cbd0a2cb43850af13"; amzn_assoc_asins = "B00K3NR6M4,1449358454,0134685997,0071350934";]]></content>
      <categories>
        <category>Exploration of Java</category>
      </categories>
      <tags>
        <tag>Exploration</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Simple Approach to Simulate User Input and Check Output]]></title>
    <url>%2FA-Simple-Approach-to-Simulate-User-Input-and-Check-Output%2F</url>
    <content type="text"><![CDATA[Recently some of my students asked me about the mechanism of unit test provided by MOOC from University of Helsinki, I checked their implementation and think it would be helpful for beginners to understand what happened actually, so this little article was posted. We will use the project “Airport” as an example, it’s the last assignment in the first week of OOP2. We focus on test only, so I will skip things regarding how to resolve it. For this exercise, we would execute the main method manually each time, input plane id, capacity repeatedly, after sometime we think our code would work, we run local tests so that we can submit to server for online judge and grading. I’ve been using this little project as an example on refactoring with the help of protection of unit test. When I input plane id, capacity number, airport code and operation code repeatedly and also painfully, I asked my students, “is this painful or not?”. Obviously all of them answered yes. Then I asked, “will you make this kind of test again and again even it’s boring and painful?”. Silence. From my past experience I know that it’s easy to skip these boring tests and we can comfort ourselves, “these code are pretty simple and I cannot make a mistake, it will work and would work, don’t worry.” I have painful memories because of such choices, because I’ve made too many simple and stupid mistakes in the past, so no matter how simple it looks, I would still make test - even it’s mannual test, boring and painful. I added this because unit test cannot replace manual test completely, though it will make manual test easier and more effective. For the Airport project, if we don’t need to input repeatedly each time, and we can capture the output of our program, compared to what is expected, we will get feedback much faster. 123String operation = scanner.nextLine();...System.out.println("Blahblahblah..."); For example, we know exactly if we input x first, then it will go the Flight Service part and print the menu choices, if we input x for the second time then the program will end the loop and quit, as a result, we will only get output of instructions of Airport Panel and Flight Service. So let’s go to a test case to see what will happen actually. 1234567891011121314151617181920212223242526@Testpublic void printsMenusAndExits() throws Throwable &#123; String syote = "x\nx\n"; MockInOut io = new MockInOut(syote); suorita(f(syote)); String[] menuRivit = &#123; "Airport panel", "[1] Add airplane", "[2] Add flight", "[x] Exit", "Flight service", "[1] Print planes", "[2] Print flights", "[3] Print plane info", "[x] Quit" &#125;; String output = io.getOutput(); String op = output; for (String menuRivi : menuRivit) &#123; int ind = op.indexOf(menuRivi); assertRight(menuRivi, syote, output, ind &gt; -1); op = op.substring(ind + 1); &#125;&#125; Above is the 2nd test case, which covers the most simple scenario as we said, input two x only. When we look into the test code, it was splitted into 3 parts: Prepare input execute Main.main(args) method Check output to see if it contains all expected lines in sequence You know that the normal behavior of scanner.nextLine() or scanner.nextInt(). The program will hang on and wait for user’s input, so that the next line of code will be executed. But why here it just runs smoothly without any wait? Before we go to this part I want to explain briefly regarding the execution of the method, it employs Java Reflection to invoke the method in a way not straightforward, but possible to make more check, for example, the first test case requires that Main is a public class, but you would probably find that to pass manual test, you can set Main access level to package. 12345@Testpublic void classIsPublic() &#123; assertTrue("Class " + klassName + " should be public, so it must be defined as\n" + "public class " + klassName + " &#123;...\n&#125;", klass.isPublic());&#125; Here klass.isPublic() is checking whether you set access level as required. OK. It seems that the class MockInOut makes magic happen, we can check the code to find the idea under the hood. You can access the source code at GitHub. 1234567891011121314public MockInOut(String input) &#123; orig = System.out; irig = System.in; os = new ByteArrayOutputStream(); try &#123; System.setOut(new PrintStream(os, false, charset.name())); &#125; catch (UnsupportedEncodingException ex) &#123; throw new RuntimeException(ex); &#125; is = new ByteArrayInputStream(input.getBytes()); System.setIn(is);&#125; You might have been typing System.out thousands of times, but did you realize that you can change the out silently like above? Here it set both out and in of System, so that we can get the output completely after execution, and we don’t need to input manually this time, because in the statement ofScanner scanner = new Scanner(System.in);, the parameter System.in is changed silently, so that scanner.nextLine() will get prepared input without hang on. Also the output will not be printed in console, but accumulated into the ByteArrayOutputStream, which can be accessed afterwards. You might be wondering that if we really want to restore the normal behavior of System.in and System.out, what shall we do? 123456789/** * Restores System.in and System.out */public void close() &#123; os = null; is = null; System.setOut(orig); System.setIn(irig);&#125; Basically it saves original in and out, when a restoration is needed, simply clear the hacked ones and set them back, then all will be as usual again. You can copy the simple sample code in the below for a quick test. 12345678910111213141516171819202122232425262728293031323334353637import java.io.*;import java.util.*;class HelloWorld &#123; public static void main(String[] args) throws IOException &#123; PrintStream orig = System.out; ByteArrayOutputStream os = new ByteArrayOutputStream(); System.setOut(new PrintStream(os, false, "UTF-8")); // Here it won't print but just accumulate for (int i = 0; i &lt; 100; i++) &#123; System.out.println("Hello World"); &#125; System.setOut(orig); // Print 100 lines of "Hello World" here since out was restored System.out.println(os.toString("UTF-8")); InputStream is = System.in; System.setIn(new ByteArrayInputStream("x\nx\n".getBytes())); Scanner scanner = new Scanner(System.in); // Without hang on System.out.println(scanner.nextLine()); System.out.println(scanner.nextLine()); try &#123; // There are only two lines provided, so here will fail System.out.println(scanner.nextLine()); &#125; catch (NoSuchElementException e) &#123; e.printStackTrace(); &#125; System.setIn(is); scanner = new Scanner(System.in); // Hang on here since `in` was restored System.out.println(scanner.nextLine()); &#125;&#125; Actually, inject and replace is a frequently used method to decouple dependencies for unit tests, which is quite useful to focus on your code only. There are more advanced and complex approaches to do this, but here we just want to explain a simple approach that “hack” in and out so that you can focus on your code, rather than the in and out. For some legacy projects, this method might be critical for refactoring, as there are too many heavy dependencies make test really hard! There is a very good book covering this topic, which I read 8 years ago and found it’s very useful.]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yet Another 10 Books For Java Learners - Part II]]></title>
    <url>%2FYet-Another-Top-10-Books-For-Java-Learners-Part-II%2F</url>
    <content type="text"><![CDATA[In the last post I introduced 5 “books” from beginner to intermediate, this time I’d like to add more stuff. Beware, they would hurt your brain permanently, take care and be prepared! No.6 Algorithms 4th EditionI recommend this book to you so that I can hurt you as I’ve been hurt, possibly permanently:) The good thing is that all the algorithms introduced in this book provide Java implementations. You can even access them in GitHub. There is also an open online course there for free, which I’ve been enrolled in and struggling with the assignments. Algorithms, Part I and Algorithms, Part II are definitely awesome and would help you a lot besides reading the book. I know that programmers have different opinions against algorithms, some said this kind of stuff was rarely used in their daily work, some said that it’s super important - at least for interviews. I leave the answer to you and IMHO it’s up to you and only up to you. Life is short, learn what you want and love first, and learn some stuff later if needed. However, if you still have much time available, then just jump into this deep ocean and, ENJOY! If sometimes you are doubtful regarding the value of this learning process, read the scripts in the below of a movie - a real movie. And ask yourself, “Does that help you with ladies?”. For me, I want to ask Professor Robert Sedgwick this question also, as he is one of the inventors of Red-Black-Tree. The inventor himself explain the data structure and algorithms to you, really exciting, right? Last but not least, if you got stuck and depressed, come here and check my painful submission history - just one of them, and you will find that you are not alone, and you will never walk alone. No.7 Introduction to Algorithms, 3rd Edition (The MIT Press)So the journey of brain hurt continues. Algorithms 4th edition is good enough, but surprisingly it doesn’t cover some important topics such as Dynamic Programming, I don’t know why but I know that many programmers have the same feeling. This book from MIT covered that and more than that, some even said that it’s better than Knuth’s Art of Programming series, as they are relatively too old and outdated. I’m not able to give any comment on this opinion, I just want to tell you that till now I never touched Knuth’s books, and so I won’t recommend them to you, even though they are said to be super good. No.8 The Mythical Man-MonthAfter two cold and cruel books on algorithms, I think it’s time to relax for a while. This book on software engineering will not hurt your brain that much - at least I didn’t. Take a cup of coffee and enjoy the reading, it’s thoughtful and also interesting. No.9 The Java Virtual Machine Specification, Java SE 8 EditionYou will be interested in how JVM works, right? If not then just skip to No.10. There are many books with title like “Inside Java Virtual Machine”, but I would say the specification is more definitive and accurate. You can even try to implement these specifications if you want and dare - I know someone learns C++ like this. It’s reasonable as JVM is implemented in C++, this kind of ridiculous learning style is really impressive, but I have to honestly admit that I just can’t. If you found this book is too boring to read, then stop immediately, the best time for you to read this book might not be fulfilled, however, please remember this book and come back later. No.10 GitHub and Awesome JavaApparently, GitHub is not a book, but the most popular Java projects are out there and it’s really easy for you to learn the best practices from these awesome projects, or from some most popular projects. Since talk is cheap, being involved in some good projects will be even more important than just reading books. There are many other good books, but I don’t want to pretend that I know all of them very well and make some general comments so that it won’t be wrong. IMHO it’s enough for you to read and practice even only one of them thoroughly, rather than just read and never put them into practice seriously. Happy Reading and Happy Coding! PS: “Best Way to Learn Java Programming Online” is a great article from Lefteris Karageorgiou of Java Code Geeks. I put it here for your reference and hope you guys enjoy it.]]></content>
      <categories>
        <category>Great Books</category>
      </categories>
      <tags>
        <tag>Awesome Books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Yet Another 10 Books For Java Learners - Part I]]></title>
    <url>%2FYet-Another-Top-10-Books-For-Java-Learners%2F</url>
    <content type="text"><![CDATA[Honestly speaking, there is no need to post an article on the topic “Top 10 Books For Java Learners”, which is possibly older than your age. I do this for the 12 students I’m teaching Java programming language recently, I’d like to summarize a book list of 10 for their reference. I don’t want to recommend books said to be great but I never read, so some of the books listed here maybe not that famous or popular, but at least they are good to me and helped me a lot in the past. No.1 MOOC By University of HelsinkiYes, I’m joking and I’m not joking. From my own experience, I don’t think it’s the most efficient way to read a book systematically when you are pure beginners - especially if you never write code before. What you need to do is to understand the basic concepts quickly first, then JUST DO IT! Keep practicing, keep practicing and keep practicing. Object-Oriented Programming with Java Part I and Part II. Register an account at Test My Code. Finish all the exercises there. Post a screenshot to prove you really did it. That’s all. Most of the students give positive feedback regarding the exercises. There is one Easter Egg in one of the test cases waiting for you to find there. Trust me, stick to the end and you won’t miss it. Wait…but this is obviously not a book, right? Yeah, right, but so what? For beginners, this would be the best resource for a quick start and get your hands dirty. Talk is cheap, show me the code! No.2 Refactoring: Improving the Design of Existing CodeAfter you get your hands dirty for a long time and write enough code like shit, this book written by Martin Fowler is worthy to read thoroughly and practice the methods introduced one by one. Refactoring: Improving the Design of Existing Code has two editions, though the 2nd Edition is available with many updates, I would personally suggest you read the 1st Edition since you are a Java learner. I always recommend this book to other programmers, as it had a great impact on my career. I was promoted to Team Leader in my first company because I finished refactoring against a module nobody wants to do - too painful and too brain-hurt. I found this book by chance in the bookshelf one afternoon, and I’m addicted to it and I just finished reading this book very quickly and used several methods there, and from that time on I began to write fully covered unit tests for my code, which made my life and our colleagues’ life much easier. No.3 Effective JavaJoshua Bloch, the guy who designed and implemented Java Collection Framework(of course not himself alone), released the 3rd Edition of this book. For me, I actually read the Chinese translation of the 2nd Edition, which is very impressive. This is a book more like a master telling his experience, insights, best practices to you, rather than a textbook. This book, like its title, is really “Effective”. No.4 Head First Design Patterns“Design Patterns: Elements of Reusable Object-Oriented Software” by GoF is said to be “Classic, Awesome…” and blahblah. However, I didn’t read this legendary book, because I am too low to enjoy another funny book: Head First Design Patterns. All the source code of this book can be accessed at GitHub. Life is short and I don’t want to waste too much time arguing which book is better or not. What I know is if you just want to read one book about Design Patterns in Java, then choose this one and you won’t regret. No.5 Clean Code: A Handbook of Agile Software CraftsmanshipClean Code by Uncle Bob, IMHO, is not that practical and useful to me compared to the books listed above. But it’s a good summary and provides more information which can enhance you still, besides that, this book is very interesting and it’s a joyful read. When Uncle Bob said that he “turned on his old TV and tried to watch some scaring movies, but there is not even one ghost there. Sh.t!”, I just laughed to the ground. Anyway, for those who really care about quality, cleanness of your code, this book is a must-read. PS: “Best Way to Learn Java Programming Online” is a great article from Lefteris Karageorgiou of Java Code Geeks. I put it here for your reference and hope you guys enjoy it. -To Be Continued- amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "true"; amzn_assoc_tracking_id = "javaneversleep-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "b2d7aa2b3289e841ea7dae7b785b8767"; amzn_assoc_asins = "0201485672,0134685997,0596007124,0132350882";]]></content>
      <categories>
        <category>Great Books</category>
      </categories>
      <tags>
        <tag>Awesome Books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Simple Tank War Game Exercise for Java Beginners]]></title>
    <url>%2FA-Simple-Tank-War-Game-Exercise-for-Java-Beginners%2F</url>
    <content type="text"><![CDATA[I’ve just published a mid-term project for a small group of students. If you are a Java beginner who is seeking some challenge to conquer, I believe this Tank War game would be fit for you. Wanna a try?😄 Solution for your reference will be released after 3 weeks. I wrote my first line of Java code, the awesome “Hello World” at 26. It was 2009 and life is really tough for me, all my hope is to finish the coding camp program as soon as possible and start working as a programmer to earn some livings. This little game was the final project of JavaSE course and I just cannot figure out it myself, only by following the instructor’s patient explanations I can catch up with what he is actually doing at that time. I don’t remember how many hours I spent on this little, stupid, and boring game, but I would never forget this painful experience. And this time, when I told the students that they need to finish this in 3 weeks, half of them silenced, I know that feeling very well - they have no idea what to do, just like me 10 years ago. Maybe they don’t know, less than 450 lines of code will be sufficient for the implementations. Unreasonable fear would just make you ignoring many obvious and clear facts. One would easily choose “Game Over”, and rarely press F2 to restart. At that time, I was upset, depressed and anxious, but with patience and sweat, I finally finished the 3 months program and fortunately found a job to begin my career as a programmer. 10 years later, it has been very clear to me that I don’t have much talent in this area, but it doesn’t mean that I cannot leverage my skills to make a difference and help others - which I’ve actually done these years. Yes, not everyone can be a great programmer, but everyone can be a programmer and make a difference - if they really want and devote themselves to it. Set up a challenging goal, and achieve it by all means - I firmly believe this is the most efficient way to improve your programming skills. So do not fear, do not hesitate. And, JUST DO IT! amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "oldyoungboy-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "de429ade981a7c8fe5027e941b980ae1"; amzn_assoc_asins = "B00TFAET2G,0134685997,0134757599,020161622X";]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>Tank War</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7 Tips of Searching GitHub Repositories You Should Know]]></title>
    <url>%2F7-Tips-of-Searching-Github-Repositories-You-Should-Know%2F</url>
    <content type="text"><![CDATA[You search on Google every day, and as a programmer, you would probably search on GitHub every day. Are you sure you know how to search GitHub repositories effectively? Let’s check out these 7 tips you probably didn’t know. 1. In Name, In Description, and In READMEGitHub supports advance search in a certain field, like repository title, description, and README. For example, you want to find some cool repository to learn Spring Cloud stuff, you can search like this: in:name spring cloud In the same way, you can also search in description or README only: in:description spring cloudin:readme spring cloud 2. More Stars, More ForksStars of a repository would provide information on how popular it is, which is an important metrics in consideration, as a result, you can search like this: stars:&gt;=3000 spring cloud You can also define a range like this: forks:10..20 spring cloud 3. Small Repositories PleaseDinosaur repositories are not what you want, you love those simple, small and smart repositories only, you can add this search term: size:&lt;=5000 spring cloud Unit of size here is KB, so 5000 means 5MB. 4. Actively Maintained Repositories PleaseMost of the time you don’t want to rely on a project that didn’t update for 7 years, actively maintained projects would give you more confidence, thus you need to introduce last push time in your search term. For example, you want to search those projects have updates in the last two weeks: pushed:&gt;2019-01-04 spring cloud You may also search repositories created before or after a certain time using created rather than push. 5. Apache License PleaseLicense of open source projects might bring you much trouble, you remember Facebook and React, right? If you want to search projects friendly licensed, for example, the well known Apache License 2, you would search like this: license:apache-2.0 spring cloud Of course, you can hunt other licenses also, just search in the complete list provided by GitHub and choose the one you love. 6. Java Onlylanguage:java will filter repositories not written in Java, yeah! If you hate Java then replace it with the one you love, for example, the best programming language PHP. 7. Rock Star OnlyYou may just want to search repositories by a Rock Star or a well-known organization because they are more likely awesome, just include user in your search term like this: user:joshlong spring cloudorg:spring-cloud spring cloud Obviously, you can combine the 7 tips together for more complex search, for example: user:joshlong language:java pushed:&gt;2018-03-04 stars:&gt;200 in:description spring boot More Options to ExploreWant to explore all possible search terms? Just play around with “Advanced Search” or read the “search help” by GitHub, the time you spent there will be definitely worthy. Happy Hunting! PS: If you are a Chinese reader you would like to read the original version by Shucheng Hou at here. My post is a simplified and slightly modified English version actually. amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "true"; amzn_assoc_tracking_id = "oldyoungboy-20"; amzn_assoc_search_bar_position = "bottom"; amzn_assoc_ad_mode = "search"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_default_search_phrase = "GitHub"; amzn_assoc_default_category = "All"; amzn_assoc_linkid = "3e67b5f3d8c58758abe55ca413b6ada4";]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7 Tips to Write Better Java Code You Should Know]]></title>
    <url>%2F7-Tips-to-Write-Better-Java-Code-You-Should-Know%2F</url>
    <content type="text"><![CDATA[Yes, you can write short, clean Java code following 7 tips introduced in this article. Some of them might make you surprised, but trust me, they are proved practices - at least by me. 1. Use IntelliJ IDEA as your IDEI’ve been using eclipse for 6 years and NetBeans for 3 years. I still use them sometimes, but most of the time I use IDEA only. I don’t want to start the holy war of IDEs here, but just want to tell you IDEA will remind you writing shorter, better, cleaner code based on its integrated best practices. You just press ALT+Enter and it will do the job for you, most of the time IDEA give smart and practical advice, you can also learn much new stuff from them. To make good use of IDEA you’d better get an SSD, at least I did - my old laptop cannot run IDEA smoothly. Just a 256GB Samsung SSD will make your life much better. It’s a worthy investment if you are still using HDD. 2. Use JDK8 or higher versionFrom JDK8 on, many new features introduced will allow you to write shorter and more expressive code. Lambda Expressions, Functional Interfaces, Stream API and etc. You don’t need to remember them actually, as IDEA will assist you to use this features, that’s another reason why you should use IDEA. “Java 8 in Action” might be of some help to you. 3. Use Maven / GradleUse Maven or Gradle to manage dependencies of your projects, to build and deploy them. If you have built many fundamental libraries to be reused among many projects, you’d better introduce Nexus if these libraries will be used internally only, otherwise, you can deploy to maven central repository. 4. Use LombokSay goodbye to the boilerplate code of setter/getter, hashcode/equals, constructors/toString. Just one annotation @Data will work, it reduces the code you write, but take care of the generated bytecode. 5. Write Unit TestsWhat? Are you serious? Yes, I am. Testable code is usually organized better and cleaner, as it will drive you to manage the relationship of classes, the access level of methods and other stuff well beforehand. I’ve found that even minimum unit tests will make development much faster and easier, which always drive you to write shorter, cleaner and better code finally. However, you will always hear honest opinions that “I don’t have time to write unit tests, it’s a waste of time as the deadline is approaching”. It sounds true and sometimes it’s true. But most of the time, from my experience I found it’s not true. If you don’t have time to write unit tests, you will “have” more time to fix bugs visible or invisible, without the quick feedback of unit test, the stability of code and new change usually decreases, and sometimes you may need to pray earnestly as you really don’t know what will happen or how many new bugs are introduced. Maybe some genius programmers can write bug-free code without unit tests. But I am not and you probably are not, too. So just do it. Trust me, you will get the reward and love it soon. JUnit and TestNG would both work, though I prefer TestNG. 6. Refactoring: Frequently but SlowlyShorter, cleaner code cannot be done at once, it needs iteratively improvements. Refactor little by little, and run test cases to make sure your change didn’t break the right behavior of the code, things will get better and better. IDEA provides great refactoring support, such as extract method, rename, inline and etc. Martin Flower’s classic book “Refactoring: Improving the Design of Existing Code (2nd Edition)” is a must-have if you have no idea what refactoring is. 7. Visit customer regularly and get feedback from themHonestly speaking this should be the first, but “the first will be last” here. You write code to resolve customer’s problems, to meet their requirements, to remove their pain points. Sometimes you just wasted too much time to implement features and functions that are unnecessary. But how to know that earlier? Keep in touch with customers regularly so that you can get their feedback as early as possible. However, this is not as easy as you think, even experienced product managers cannot get the point in a short time, less than programmers who mainly focus on implementing. A practical suggestion is, if you cannot reach customer directly, you should connect to your product owner frequently and talk about your concern clearly but also politely, this will save all your time. I’ve found these 7 tips useful to me in the past years and I hope it will also help you. Happy Coding! PS: This article was approved and published at DZone on Dec 17, 2018 with slight changes from the Editor. Click to Read amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "oldyoungboy-book-code-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "a1b6fc683ac27c1f86192a68134e0647"; amzn_assoc_asins = "B0781Z7Y3S,0201485672,1617291994,0132350882";]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fibonacci and BigInteger: Secret Under the Hood]]></title>
    <url>%2FFibonacci-and-BigInteger%2F</url>
    <content type="text"><![CDATA[No matter what programming language you are learning, Fibonacci numbers calculation is just too classic to skip. It seems very easy to implement, but also can be deep enough to catch up with, especially when the number is super big. Have you thought that ever before? It can be super easy to implement using recursion in just one line of code, even using Java.😅 123int fib(int n) &#123; return n &lt;= 2 ? 1 : (fib(n - 1) + fib(n - 2));&#125; And to make you understand the basic optimization idea, monetization mechanism will be introduced via an integer array or a HashMap, but the idea is same: calculate once and only once, so that those poor rabbits would feel life much easier. Add just one more line of code and thanks to the Lambdas feature provided since JDK8, life is much easier nowadays. 12345private static Map&lt;Integer, Integer&gt; CACHE = new HashMap&lt;&gt;();int fib(int n) &#123; return CACHE.computeIfAbsent(n, k -&gt; (k &lt;= 2 ? 1 : (fib(k - 1) + fib(k - 2))));&#125; There is always someone scared of the famous StackOverflowError, they would tell you not to use recursion but do an iterative way, like this: 12345678910int fib(int n) &#123; if (n &lt;= 2) return 1; int[] cache = new int[n]; cache[0] = cache[1] = 1; for (int i = 2; i &lt; n; i++) &#123; cache[i] = cache[i - 1] + cache[i - 2]; &#125; return cache[n - 1];&#125; Obviously, the integer array can be avoided, you can just keep three values and update them till the end, but that’s not the problem we want to discuss here. You would have probably found that it’s very easy for the result to be much bigger than the upper limit of int, long, double. For example, if we input n as 2048, what will be the exact result then? 454153044374378942504557144629068920270090826129364442895118239027897145250928343568434971 803477173043320774207501029966396250064078380187973638077418159157949680694899576625922604 895968605634843621876639428348247300097930657521757592440815188064651826480022197557589955 655164820646173515138267042115173436029259905997102292769397103720814141099147144935820441 85153918055170241694035610145547104337536614028338983073680262684101 It’s 4.54 * 10^427. As for Java, for this kind of problem, you have no other choice but BigInteger, and it’s very easy touse. 12345private static Map&lt;Integer, BigInteger&gt; CACHE = new HashMap&lt;&gt;();BigInteger fib(int n) &#123; return CACHE.computeIfAbsent(n, k -&gt; (k &lt;= 2 ? BigInteger.ONE : (fib(k - 1).add(fib(k - 2)))));&#125; Congratulations! You will get a BOMB exploding like this:123Exception in thread "main" java.lang.StackOverflowError at java.util.HashMap.hash(HashMap.java:339) at java.util.HashMap.computeIfAbsent(HashMap.java:1099) You may use -Xss4m to shut it up, or resolve it in an iterative way a little bit optimized, wherein we won’t waste space to build an array. Yes, it’s right, recursion is easy to think of and implement, but it’s just too close to StackOverflowError. 123456789101112BigInteger fib(int n) &#123; if (n &lt;= 2) return BigInteger.ONE; BigInteger prev = BigInteger.ONE, prevOfPrev = BigInteger.ONE; BigInteger curr = null; for (int i = 2; i &lt; n; i++) &#123; curr = prev.add(prevOfPrev); prevOfPrev = prev; prev = curr; &#125; return curr;&#125; BigInteger, what’s the secret behind it that it can represent a number beyond the upper limit of all primitive data types of Java? The idea is still simple, but the implementation can be complex, especially when highly optimized is a must. bigint in Github would give you more information on how Timothy Buktu approaches and optimizes it. There is a famous quote in The Lord of The Rings by Sam, “I can’t carry it for you, but I can carry you”, as for BigInteger, it seems should be “I can’t carry it for you, and I can’t carry you, but I can carry a segment of you.”😅 Yes, the whole number is too big, but if we split it into many parts, then we will find each part might be within the upper limit, if we store each of them in an array, and perform the calculation in binary level, also handle the carrying part well, then a container to store a big number will be possible. Pretty cool and smart, right? But what exactly is under the hood? Let’s check it out in the next post. TO BE CONTINUED amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "oldyoungboy-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "21ce171baf5d871f0872d552bc2cbace"; amzn_assoc_asins = "0805063056,B0015DWM2K,0767908163,1590787528";]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Fibonacci</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Refactoring 2nd Edition Available Now! A Masterpiece by Martin Fowler You Shall Never Miss!]]></title>
    <url>%2FRefactoring-2nd-Available-A-Masterpiece-You-Shall-Never-Miss%2F</url>
    <content type="text"><![CDATA[“Refactoring: Improving the Design of Existing Code”, the 2nd edition is available now! I read the first edition in 2009 for the first time. It significantly shaped my coding habit, which also made me promoted as the team leader in less than one year - I will tell you why later. After nearly 20 years this book was revised, enhanced, refactored and released. Trust me, you SHALL NEVER miss this masterpiece. Martin Fowler introduced a term called “Bad Smells” in this book and provides corresponding refactorings to resolve them. The methodology of unit test is a must for successful refactoring, as many programmers misunderstood at this part. They knew bad code smells and determined to remove them and they kept changing, but they didn’t perform unit test to make this process reliable and trustable. They usually gave up finally, and the complex, messy legacy code laughed at them in pride loudly. In my first 3 years experience as a Java Software Engineer, I maintained a code base existing at least 3 years. It’s a mystery and a huge mess. You will never know how many new bugs will be introduced after you fix a bug. And it’s a nightmare to add some new features - I still remember one of the QA reported to his leader that he even cried when he found that the module is totally untestable - one bug fixed and another new pop up! Each step forward is more difficult than climbing the Himalayas. I don’t know whether he wants to kill me or not at that time. It’s lucky that I am still alive. Fortunately, I found the 1st edition of Refactoring in bookshelf and started to read and practice. I applied several methods in the book, such as introduce parameter object, extract method, rename, remove middle class, extract super class and etc. However, I did this in spare time as other colleagues told me such change can be very dangerous, “at least the old code can run, things are not that bad”. But as the maintainer, I must say it’s too bad to bear any more. My manager is also suspicious and concern a lot about the time would be invested, “new features, rather than reorganization of existing code, are more valuable”. Totally agreed! Then I continued in spare time. Talk is cheap, I will show them the result. I finished the first prototype after two weeks and presented to my manager. As expected, he was very happy to payback such technique debt and he even told me to share this among the team. With the protection of 60+ unit tests and necessary functional test, the finished refactoring made me, QA, project manager, and product manager all super happy. This is not the end. Adding new features or enhancing existing features became much easier than I expected, as after refactoring, the code was well organized and the re-usage rate was pretty good, you just need to change one place in a short time and all done. Previously, thanks to the Copy-Paste code style you never know how many other places were not touched and covered. QA also gave feedback that this module became much stabler than before, which means their test workload is reduced greatly. One of my colleagues was very surprised to see that this module reborn to be a clean, beautiful and easy to maintain code base, “how can this be, man?”, he asked. After my team leader left for IBM, I was immediately promoted as the new team leader. Thanks to Refactoring! However, I would warn you, only those want to make a difference, write better code will be motivated to refactoring and perform unit tests, as this will never be easy. Patience, carefulness, boldness are all required to achieve the goal and reach the promise land. Story time over, let’s go back to the topic. Martin Fowler introduced 15 completely new refactorings in 2nd edition, which I’d like to have a try immediately, who knows which role I will be promoted this time? 123456789101112131415Combine Functions into ClassCombine Functions into TransformMove Statements into FunctionMove Statements to CallersRemove Dead CodeRename FieldRename VariableReplace Command with FunctionReplace Derived Variable with QueryReplace Inline Code with Function CallReplace Loop with PipelineReplace Query with ParameterReplace Subclass with DelegateReturn Modified ValueSplit Phase There are also some other books I once read under this topic and maybe they will be helpful to you, too. I listed them here also. But if you can just pick up one, then it shall always be “Refactoring: Improving the Design of Existing Code”. Remember, the 2nd Edition this time. amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "oldyoungboy-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "67450530ae19c250a2e7773d9911f72b"; amzn_assoc_asins = "0134757599,0131177052,0132350882,020161622X";]]></content>
      <categories>
        <category>Great Books</category>
      </categories>
      <tags>
        <tag>Refactoring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Behind-the-Scenes Secrets of Jsoup V: Tips & Tricks of Optimization]]></title>
    <url>%2FBehind-the-Scenes-Secrets-of-Jsoup-05-Tips-And-Tricks%2F</url>
    <content type="text"><![CDATA[We have done things right, now it’s time to do things faster. We would keep Donald Knuth‘s warning in mind, “We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil”. According to Jonathan Hedley, he uses YourKit Java Profiler to measure memory usage and find the performance hot point. Using statistic result of such kind of tools is crucial for the success of optimizations, it will prevent you spend time just wondering and making useless tunings, which doesn’t improve performance but also make your code unnecessarily complex and hard to maintain. Jonathan also talked about this in the “Colophon”. We will list some tips and tricks used in Jsoup, they are randomly ordered currently, would be re-organized in the future. 1. Padding for Indent123456789101112131415161718// memoised padding up to 21, from "", " ", " " to " "static final String[] padding = &#123;......&#125;;public static String padding(int width) &#123; if (width &lt; 0) throw new IllegalArgumentException("width must be &gt; 0"); if (width &lt; padding.length) return padding[width]; char[] out = new char[width]; for (int i = 0; i &lt; width; i++) out[i] = ' '; return String.valueOf(out);&#125;protected void indent(Appendable accum, int depth, Document.OutputSettings out) throws IOException &#123; accum.append('\n').append(StringUtil.padding(depth * out.indentAmount()));&#125; Pretty smart, right? It maintains a cache of different lengths of paddings which would cover 80% of the cases - which I assume would be based on the author’s experience and statistic. 2. Has Class Or Not?Element#hasClass was marked as performance sensitive, for example, we want to check whether &lt;div class=&quot;logged-in env-production intent-mouse&quot;&gt; has class production, split class by whitespace to an array then loop and search would work, but in a deep traverse this would be in-efficiency. Jsoup introduces Early Exit here first, by compare length with target class name to avoid unnecessary scan and search, which will also be beneficial. Then it uses a pointer detecting whitespace and performs regionMatches - honestly speaking this is the first time I got to know method String#regionMatches🙈😅 123456789101112131415161718192021222324252627282930313233343536373839404142public boolean hasClass(String className) &#123; final String classAttr = attributes().getIgnoreCase("class"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len &lt; wantLen) &#123; return false; &#125; // if both lengths are equal, only need compare the className with the attribute if (len == wantLen) &#123; return className.equalsIgnoreCase(classAttr); &#125; // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations) boolean inClass = false; int start = 0; for (int i = 0; i &lt; len; i++) &#123; if (Character.isWhitespace(classAttr.charAt(i))) &#123; if (inClass) &#123; // white space ends a class name, compare it with the requested one, ignore case if (i - start == wantLen &amp;&amp; classAttr.regionMatches(true, start, className, 0, wantLen)) &#123; return true; &#125; inClass = false; &#125; &#125; else &#123; if (!inClass) &#123; // we're in a class name : keep the start of the substring inClass = true; start = i; &#125; &#125; &#125; // check the last entry if (inClass &amp;&amp; len - start == wantLen) &#123; return classAttr.regionMatches(true, start, className, 0, wantLen); &#125; return false;&#125; 3. Tag Name In or Not?As we analyzed in previous articles, HtmlTreeBuilderState will validate nest correctness by checking whether tag name in a certain collection or not. We can compare the implementation before and after 1.7.3 to have a check. 1234567891011// 1.7.2&#125; else if (StringUtil.in(name, "base", "basefont", "bgsound", "command", "link", "meta", "noframes", "script", "style", "title")) &#123; return tb.process(t, InHead);&#125;// 1.7.3static final String[] InBodyStartToHead = new String[]&#123;"base", "basefont", "bgsound", "command", "link", "meta", "noframes", "script", "style", "title"&#125;;...&#125; else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) &#123; return tb.process(t, InHead);&#125; According to the comment written by the author, “A little harder to read here, but causes less GC than dynamic varargs. Was contributing around 10% of parse GC load. Must make sure these are sorted, as used in findSorted”. Simply using static final constant array, also make them sorted so that binary search will also improve from O(n) to O(log(n)), the cost–performance ratio is pretty good here. However, “MUST update HtmlTreebuilderStateTest if more arrays added” is not a good way to synchronize IMHO, rather than Copy &amp; Paste I would use reflection to retrieve those constants. You may find my proposal in Pull Request #1157: “Simplify state sorting status unit test - avoid duplicated code in HtmlTreeBuilderStateTest.java”. 4. Flyweight PatternDo you know the trick of Integer.valueOf(i)? It maintains a IntegerCache cache from -128 to 127 or higher if configured(java.lang.Integer.IntegerCache.high), as a result, == and equals result will be different when the value is located in a different range(a classic Java interview question?). This is an example of Flyweight Pattern actually. As for Jsoup, applying this pattern will also reduce object created times and gain benefit to performance. 1234567891011121314151617181920212223242526272829303132333435363738/** * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks. * &lt;p /&gt; * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list. * That saves both having to create objects as hash keys, and running through the entry list, at the expense of * some more duplicates. */private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) &#123; // limit (no cache): if (count &gt; maxStringCacheLen) return new String(charBuf, start, count); if (count &lt; 1) return ""; // calculate hash: int hash = 0; int offset = start; for (int i = 0; i &lt; count; i++) &#123; hash = 31 * hash + charBuf[offset++]; &#125; // get from cache final int index = hash &amp; stringCache.length - 1; String cached = stringCache[index]; if (cached == null) &#123; // miss, add cached = new String(charBuf, start, count); stringCache[index] = cached; &#125; else &#123; // hashcode hit, check equality if (rangeEquals(charBuf, start, count, cached)) &#123; // hit return cached; &#125; else &#123; // hashcode conflict cached = new String(charBuf, start, count); stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again &#125; &#125; return cached;&#125; There is also another scenario to minimize new StringBuilder GCs using the same idea. 123456789101112131415private static final Stack&lt;StringBuilder&gt; builders = new Stack&lt;&gt;();/** * Maintains cached StringBuilders in a flyweight pattern, to minimize new StringBuilder GCs. The StringBuilder is * prevented from growing too large. * &lt;p&gt; * Care must be taken to release the builder once its work has been completed, with &#123;@see #releaseBuilder&#125;*/public static StringBuilder borrowBuilder() &#123; synchronized (builders) &#123; return builders.empty() ? new StringBuilder(MaxCachedBuilderSize) : builders.pop(); &#125;&#125; Actually, CharacterReader and StringUtil are worthy to digest more and more as there are many useful tips and tricks that will inspire you. 5. Other Improvement Methods Use RandomAccessFile to read files that improved file read time by 2x. Check #248 for more details Node hierarchy refactoring. Check #911 for more details “Improvements largely from re-ordering the HtmlTreeBuilder methods based on analysis of various websites” - I list this one here because it’s very practical. Deeper understanding and observation of how the code will run will also give you some insights Call list.toArray(0) rather than list.toArray(list.size()) - this has been used in certain open source projects such as h2database, so I also proposed this in another Pull Request #1158 6. The UnknownsOptimization never ends. There are still many tips and tricks I didn’t discover at this time. I would appreciate if you can share them to me if you find more inspiring ideas in Jsoup. You may find my contact information in the left sidebar of this website or simply email to ny83427 at gmail.com. -To Be Continued-]]></content>
      <categories>
        <category>Code Review</category>
      </categories>
      <tags>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Behind-the-Scenes Secrets of Jsoup IV: CSS Selector]]></title>
    <url>%2FBehind-the-Scenes-Secrets-of-Jsoup-04-CSS-Selector%2F</url>
    <content type="text"><![CDATA[Most of the time, you are just consuming the Document Jsoup built for you, like document.select(${selector}). It would be helpful to go through W3C CSS Selector Specification to understand Jsoup’s roadmap. We have talked about Node Traverse before, what Selector will actually do is just filtering and collecting while traversing, and the key point here will be parsing and evaluating given queries. Overview of PackagePackage org.jsoup.select didn’t change much in latest version 1.12.1-SNAPSHOT, I would reference UML diagram made by Yihua Huang directly here: Besides NodeVistor the interface, there is another similar interface NodeFilter, their methods are nearly the same: 123456789101112131415161718192021222324252627public interface NodeFilter &#123; /** * Filter decision. */ enum FilterResult &#123; /** Continue processing the tree */ CONTINUE, /** Skip the child nodes, but do call &#123;@link NodeFilter#tail(Node, int)&#125; next. */ SKIP_CHILDREN, /** Skip the subtree, and do not call &#123;@link NodeFilter#tail(Node, int)&#125;. */ SKIP_ENTIRELY, /** Remove the node and its children */ REMOVE, /** Stop processing */ STOP &#125; /** * Callback for when a node is first visited. */ FilterResult head(Node node, int depth); /** * Callback for when a node is last visited, after all of its descendants have been visited. */ FilterResult tail(Node node, int depth);&#125; There is only one implementation in production code, which is FirstFinder, 5 other implementations are all located in test and probably reserved for the future. As for FirstFinder, it’s easy to guess that it’s created in the purpose of optimization. You don’t need to collect all the matching elements and return the first one, instead of invoking select(${selector}).get(0), Jsoup introduces another method selectFirst(${selector}) which will be useful when you just care about the first one - a frequent scenario actually. NodeFilter: Another TraverseI don’t want to repeat Node Traverse here again, but it will be helpful to review it in another way - the implementation of filtering. The idea and workflow are totally the same, but a little bit longer. You may compare to NodeTraversor#traverse for better understanding. 123456789101112131415161718192021222324252627282930313233343536373839404142434445public static FilterResult filter(NodeFilter filter, Node root) &#123; Node node = root; int depth = 0; while (node != null) &#123; FilterResult result = filter.head(node, depth); if (result == FilterResult.STOP) return result; // Descend into child nodes: if (result == FilterResult.CONTINUE &amp;&amp; node.childNodeSize() &gt; 0) &#123; node = node.childNode(0); ++depth; continue; &#125; // No siblings, move upwards: while (node.nextSibling() == null &amp;&amp; depth &gt; 0) &#123; // 'tail' current node: if (result == FilterResult.CONTINUE || result == FilterResult.SKIP_CHILDREN) &#123; result = filter.tail(node, depth); if (result == FilterResult.STOP) return result; &#125; Node prev = node; // In case we need to remove it below. node = node.parentNode(); depth--; if (result == FilterResult.REMOVE) prev.remove(); // Remove AFTER finding parent. result = FilterResult.CONTINUE; // Parent was not pruned. &#125; // 'tail' current node, then proceed with siblings: if (result == FilterResult.CONTINUE || result == FilterResult.SKIP_CHILDREN) &#123; result = filter.tail(node, depth); if (result == FilterResult.STOP) return result; &#125; if (node == root) return result; Node prev = node; // In case we need to remove it below. node = node.nextSibling(); if (result == FilterResult.REMOVE) prev.remove(); // Remove AFTER finding sibling. &#125; // root == null? return FilterResult.CONTINUE;&#125; Using FirstFinder as an example, the idea is straightforward. It keeps the evaluator and the matching result, and return a FilterResult of STOP when the first matching element was found. 123456789101112131415161718192021222324252627private static class FirstFinder implements NodeFilter &#123; private final Element root; private Element match = null; private final Evaluator eval; FirstFinder(Element root, Evaluator eval) &#123; this.root = root; this.eval = eval; &#125; @Override public FilterResult head(Node node, int depth) &#123; if (node instanceof Element) &#123; Element el = (Element) node; if (eval.matches(root, el)) &#123; match = el; return STOP; &#125; &#125; return CONTINUE; &#125; @Override public FilterResult tail(Node node, int depth) &#123; return CONTINUE; &#125;&#125; The EvaluatorsOK. We have gone through the traverse again via review the filtering function. Now it’s time to understand how Jsoup parse a given query. We will look at Evaluator, CombiningEvaluator, and StructuralEvaluator first. Evaluator is a abstract class with 39 inherited subclasses which cover querying by id, name, tagName(equals or endsWith), class, attribute name, attribute value, sibling index, texts, regex match and etc. Since we have set these properties well while parsing the DOM tree, it will be very easy to implement the abstract method: 1234/*** Test if the element meets the evaluator's requirements.*/public abstract boolean matches(Element root, Element element); CombiningEvaluator combines multiple evaluators with logic expression And or Or, which can process combinators like &quot;,&quot;, &quot;&gt;&quot;, &quot;+&quot;, &quot;~&quot;, &quot; &quot; StructuralEvaluator is used to simulate query like div &gt; p &gt; span or div p span. ImmediateParent will handle div &gt; p &gt; span while Parent will handle div p span. We will take a look at Parent implementation: 12345678910111213141516171819202122232425static class Parent extends StructuralEvaluator &#123; public Parent(Evaluator evaluator) &#123; this.evaluator = evaluator; &#125; public boolean matches(Element root, Element element) &#123; if (root == element) return false; Element parent = element.parent(); while (true) &#123; if (evaluator.matches(root, parent)) return true; if (parent == root) break; parent = parent.parent(); &#125; return false; &#125; @Override public String toString() &#123; return String.format(":parent%s", evaluator); &#125;&#125; And QueryParser that will parse a CSS selector into an Evaluator tree, handle above cases like this: 123456// for most combinators: change the current eval into an AND of the current eval and the new evalif (combinator == '&gt;') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));else if (combinator == ' ') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));... QueryParser FinallyAfter we explored different kinds of Evaluator, it will be easy to understand the parsing process in the below: 123456789101112131415161718192021222324252627282930313233private QueryParser(String query) &#123; this.query = query; this.tq = new TokenQueue(query);&#125;Evaluator parse() &#123; tq.consumeWhitespace(); if (tq.matchesAny(combinators)) &#123; // if starts with a combinator, use root as elements evals.add(new StructuralEvaluator.Root()); combinator(tq.consume()); &#125; else &#123; findElements(); &#125; while (!tq.isEmpty()) &#123; // hierarchy and extras boolean seenWhite = tq.consumeWhitespace(); if (tq.matchesAny(combinators)) &#123; combinator(tq.consume()); &#125; else if (seenWhite) &#123; combinator(' '); &#125; else &#123; // E.class, E#id, E[attr] etc. AND findElements(); // take next el, #. etc off queue &#125; &#125; if (evals.size() == 1) return evals.get(0); return new CombiningEvaluator.And(evals);&#125; Easier than expected, right? The implementation here is clean, elegant and easy to understand. Besides that, java doc of Selector is also impressive, you can play around with Try Jsoup with Selector syntax. -To Be Continued-]]></content>
      <categories>
        <category>Code Review</category>
      </categories>
      <tags>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Behind-the-Scenes Secrets of Jsoup III: The Tree and The State Machine]]></title>
    <url>%2FBehind-the-Scenes-Secrets-of-Jsoup-03-Build-The-Tree%2F</url>
    <content type="text"><![CDATA[Ready? The challenging task finally came. We will build a tree this time so that you don’t have to traverse before it was built.😅TreeBuilder has two implementations, XmlTreeBuilder is relatively easy while HtmlTreeBuilder is much more complex. And we will go through them today. Overview of PackageI will skip general introduction about Compiler, Lex, Parser as there are too many articles talking about them. We will go to Jsoup source code directly. Let’s have a quick look at several classes under package org.jsoup.parser. Parser: Facade of Jsoup parsing. 123private TreeBuilder treeBuilder; // this is the man who actually do the jobprivate ParseErrorList errors; // by default Jsoup didn't collect errors of html but you can enable thisprivate ParseSettings settings; // switches of preserveTagCase and preserveAttributeCase Token: Parse tokens for the Tokeniser. It’s a abstract class with 6 subclasses: Doctype, StartTag, EndTag, Comment, Character, EOF Tokeniser: Read input stream into tokens. It keeps current state and emitPending as the token we are about to emit on next read, it also keeps tagPending, startPending, endPending, charPending, doctypePending, and commentPending before tokens were filled up completely CharacterReader: consumes tokens off a string, it might be inspired from ByteBuffer of NIO as there are similar methods like consume()、unconsume()、mark()、rewindToMark() and consumeTo() TokeniserState and HtmlTreeBuilderState: Lexing/Parsing State Machine. Jsoup applied State Pattern to implement it using enumerations, which is a classic example of design pattern usage also. Using a transition table is easy for the transition between different states but would be difficult to perform extra work during the transition HtmlTreeBuilder and XmlTreeBuilder: I list them in the end as they basically play a role like a manager, collaborating Tokeniser and Lexing, Parsing State Machine to finish the work Lexing and Parsing State Pattern implementation would the most complex part of Jsoup. You can get to know this even just from lines of code statistics. Top 7 source files here! File blank comment code org.jsoup.parser.TokeniserState.java 27 46 1671 org.jsoup.parser.HtmlTreeBuilderState.java 43 56 1429 org.jsoup.helper.HttpConnection.java 162 51 979 org.jsoup.nodes.Element.java 156 604 727 org.jsoup.parser.HtmlTreeBuilder.java 104 38 591 org.jsoup.select.Evaluator.java 139 107 532 org.jsoup.parser.CharacterReader.java 60 61 385 State Machine and State Pattern12⬇⬇ ⬇ ⬇ &lt;div&gt;test&lt;/div&gt; If we use a very short code snippet as an example, each arrow would point to a state like TagOpen, TagName, Data, EndTagOpen. I just list two of them in the below: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * States and transition activations for the Tokeniser. */enum TokeniserState &#123; Data &#123; // in data state, gather characters until a character reference or tag is found void read(Tokeniser t, CharacterReader r) &#123; switch (r.current()) &#123; case '&amp;': t.advanceTransition(CharacterReferenceInData); break; case '&lt;': t.advanceTransition(TagOpen); break; case nullChar: t.error(this); // NOT replacement character (oddly?) t.emit(r.consume()); break; case eof: t.emit(new Token.EOF()); break; default: String data = r.consumeData(); t.emit(data); break; &#125; &#125; &#125;, TagOpen &#123; // from &lt; in data void read(Tokeniser t, CharacterReader r) &#123; switch (r.current()) &#123; case '!': t.advanceTransition(MarkupDeclarationOpen); break; case '/': t.advanceTransition(EndTagOpen); break; case '?': t.advanceTransition(BogusComment); break; default: if (r.matchesLetter()) &#123; t.createTagPending(true); t.transition(TagName); &#125; else &#123; t.error(this); t.emit('&lt;'); // char that got us here t.transition(Data); &#125; break; &#125; &#125; &#125;, ...&#125; Understand the idea of Token parse we can go to TreeBuilder process, we will go to the core section first, then go to XmlTreeReader which is easier. We will talk about HtmlTreeReader at last. 1234567891011protected void runParser() &#123; while (true) &#123; Token token = tokeniser.read(); // protected abstract boolean process(Token token); process(token); token.reset(); if (token.type == Token.TokenType.EOF) break; &#125;&#125; As for Tokeniser#read():12345678910111213141516171819Token read() &#123; while (!isEmitPending) state.read(this, reader); // if emit is pending, a non-character token was found: return any chars in buffer, and leave token for next read: if (charsBuilder.length() &gt; 0) &#123; String str = charsBuilder.toString(); charsBuilder.delete(0, charsBuilder.length()); charsString = null; return charPending.data(str); &#125; else if (charsString != null) &#123; Token token = charPending.data(charsString); charsString = null; return token; &#125; else &#123; isEmitPending = false; return emitPending; &#125;&#125; XmlTreeBuilder FirstAfter exploring the Lexing part we can go to the Parsing part now. We will go through the easier part XmlTreeBuilder first, focusing on its implementation of method process(token) in abstract class TreeBuilder. XmlTreeBuilder basically maintains a stack and insert node according to token type: 1234567891011121314151617181920212223242526@Overrideprotected boolean process(Token token) &#123; // start tag, end tag, doctype, comment, character, eof switch (token.type) &#123; case StartTag: insert(token.asStartTag()); break; case EndTag: popStackToClose(token.asEndTag()); break; case Comment: insert(token.asComment()); break; case Character: insert(token.asCharacter()); break; case Doctype: insert(token.asDoctype()); break; case EOF: // could put some normalisation here if desired break; default: Validate.fail("Unexpected token type: " + token.type); &#125; return true;&#125; As for insert, we will just use StartTag as an example in the below. The other insert methods accept different types of Token but the idea is the same. 123456789101112Element insert(Token.StartTag startTag) &#123; Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes)); insertNode(el); if (startTag.isSelfClosing()) &#123; if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output. see above. tag.setSelfClosing(); &#125; else &#123; stack.add(el); &#125; return el;&#125; HtmlTreeBuilder LastCompared to XmlTreeBuilder, HtmlTreeBuilder is much more complex. It introduces HtmlTreeBuilderState to process transitions. As Html is relatively loose in syntax and error tolerance, Jsoup won’t simply quit when certain kinds of error detected, but choose to record them and continue. It will also try to close those tags not closed properly. Some nested tags have sequence restriction, such as a &lt;td&gt; must be under &lt;th&gt; or &lt;tr&gt;, while tr must be under &lt;tbody&gt; or &lt;table. There are currently 23 HtmlTreeBuilderState and we will use a typical Html snippet as an example, which came from Yihua Huang’s work. Comments like &lt;!-- State: --&gt; will indicate what kind of HtmlTreeBuilderState we are at. 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!-- State: Initial --&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&lt;!-- State: BeforeHtml --&gt;&lt;html lang='zh-CN' xml:lang='zh-CN' xmlns='http://www.w3.org/1999/xhtml'&gt;&lt;!-- State: BeforeHead --&gt;&lt;head&gt; &lt;!-- State: InHead --&gt; &lt;script type="text/javascript"&gt; //&lt;!-- State: Text --&gt; function xx()&#123; &#125; &lt;/script&gt; &lt;noscript&gt; &lt;!-- State: InHeadNoscript --&gt; Your browser does not support JavaScript! &lt;/noscript&gt;&lt;/head&gt;&lt;!-- State: AfterHead --&gt;&lt;body&gt;&lt;!-- State: InBody --&gt;&lt;textarea&gt; &lt;!-- State: Text --&gt; xxx&lt;/textarea&gt;&lt;table&gt; &lt;!-- State: InTable --&gt; &lt;!-- State: InTableText --&gt; xxx &lt;tbody&gt; &lt;!-- State: InTableBody --&gt; &lt;/tbody&gt; &lt;tr&gt; &lt;!-- State: InRow --&gt; &lt;td&gt; &lt;!-- State: InCell --&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; As we said before, nested tags such as tr cannot be under body directly, they need to be organized under table or tbody. And DOCTYPE declaration also should not be seen in body. In method boolean process(Token t, HtmlTreeBuilder tb) of InBody, there is a case to handle this. 1234case Doctype: &#123; tb.error(this); return false;&#125; If head was not closed before body, Jsoup will auto-close it.12345678InHead &#123; boolean process(Token t, HtmlTreeBuilder tb) &#123;...&#125; private boolean anythingElse(Token t, TreeBuilder tb) &#123; tb.processEndTag("head"); return tb.process(t); &#125;&#125; As the State Pattern implementation needs to handle many different kinds of cases, one can be easily lost while reading the source code. Understanding the concept and general ideas first will be of help while debugging the code to know what Jsoup is doing, but still, it’s not easy and would hurt your brain😭 -To Be Continued-]]></content>
      <categories>
        <category>Code Review</category>
      </categories>
      <tags>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Behind-the-Scenes Secrets of Jsoup II: Traverse A Tree Before It Was Built]]></title>
    <url>%2FBehind-the-Scenes-Secrets-of-Jsoup-02-Node-Traverse%2F</url>
    <content type="text"><![CDATA[Here we go! We’ve got a HTML or XML snippet, it would be clean or dirty, small or large, safe or dangerous, but our task won’t change. We need to extract and manipulate data supporting the best of DOM, CSS, and jquery-like methods. The basic idea would be crystal clear, you need to build a DOM tree and traverse it with or without filtering. That’s it. Sounds easy, right?😅Then Just Do It…and you would probably…cry. A tree consists of a root node and its children from top to bottom. So it’s straightforward to get the root node first, retrieve its attributes then traverse to its child nodes and maintain the relationship at the same time. The class diagram of org.jsoup.nodes generated by Intellij IDEA is like this: PS: LeafNode was introduced in 1.11.1 for memory usage optimization. “By refactoring the node hierarchy to not track childnodes or attributes by default for lead nodes. For the average document, that’s about a 30% memory reduction.” You can get more details on #911, which was a good example of performance improvement. Besides other classes will be introduced in the future, Element and Document would be most frequently used, but Node is the root of the inheritance tree. Fields and methods worthy of notice are listed in the below: attributes: key-value collection. Key like ‘type’, ‘id’, ‘name’, ‘value’ and etc. Jsoup especially maintains a list of boolean attribute keys such as ‘checked’(for example: &lt;input type=&quot;checkbox&quot; checked value=&quot;Registered&quot; /&gt;). Literally, two classes Attributes and Attribute are mapped correspondingly. A node can read and write attributes, which provides the ability to clean, correct given HTML parentNode, childNodes and siblingNodes will be used to access nodes related to current baseUri() that will be used to convert relative URL address to absolute I would talk more about Node traverse in “CSS Selector” part while touching a little bit here first. Slightly different from Yihua Huang‘s interpretation, Jonathan made some refactorings here, but the concept is still the same. These lines of code in class NodeTraversor play an important role in the whole picture: 12345678910111213141516171819202122public static void traverse(NodeVisitor visitor, Node root) &#123; Node node = root; int depth = 0; while (node != null) &#123; visitor.head(node, depth); if (node.childNodeSize() &gt; 0) &#123; node = node.childNode(0); depth++; &#125; else &#123; while (node.nextSibling() == null &amp;&amp; depth &gt; 0) &#123; visitor.tail(node, depth); node = node.parentNode(); depth--; &#125; visitor.tail(node, depth); if (node == root) break; node = node.nextSibling(); &#125; &#125;&#125; Using recursion here is dangerous, though much easier. StackOverflowError might occur if the DOM tree is too deep. Iterate through is a must here. Don’t tell me you want to use -Xss256M to silence the world.😅 I want to emphasize that NodeVisitor is an interface. It defines what you would do when a node is first visited and last visited. 1234567891011public interface NodeVisitor &#123; /** * Callback for when a node is first visited. */ void head(Node node, int depth); /** * Callback for when a node is last visited, after all of its descendants have been visited. */ void tail(Node node, int depth);&#125; Implementations such as Accumulator would be used to collect nodes that pass evaluations parsed from the query, that’s actually the key point of document.select(&quot;${selector}&quot;). Go to class Collector and you will find it: 1234567891011/** * Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator. * @param eval Evaluator to test elements against * @param root root of tree to descend * @return list of matches; empty if none */public static Elements collect (Evaluator eval, Element root) &#123; Elements elements = new Elements(); NodeTraversor.traverse(new Accumulator(root, elements, eval), root); return elements;&#125; Accumulator kept a reference to the node where traverse begins (which means it doesn’t necessarily need to be root), and update elements which you may think of as an ArrayList for simplification. 1234567891011121314151617181920212223private static class Accumulator implements NodeVisitor &#123; private final Element root; private final Elements elements; private final Evaluator eval; Accumulator(Element root, Elements elements, Evaluator eval) &#123; this.root = root; this.elements = elements; this.eval = eval; &#125; public void head(Node node, int depth) &#123; if (node instanceof Element) &#123; Element el = (Element) node; if (eval.matches(root, el)) elements.add(el); &#125; &#125; public void tail(Node node, int depth) &#123; // void &#125;&#125; Other NodeVisitor implementations such as FormattingVisitor, CleaningVisitor, OuterHtmlVisitor, W3CBuilder are also used in certain scenarios. NodeTraversor reuses the depth-first search process and provides the convenience of extra behaviors in the process, which makes the code clean and consistent. However, I guess you would be very confused till now. Why the hack you begin from node traverse first? We even don’t have a tree built! Yes, exactly. But remember, you have to begin with the end in mind. You always want to find DOM elements matching given search criteria, so the first thing you will think of is actually traversing, it will also affect how you build the tree - perhaps I should say “parse the tree” here. And it will touch the topics of Compilers. Fortunately, we don’t need to dig into this mysterious area. Lex and Parse are enough to achieve the goal. And we will talk about State Machine and State Pattern in the next article. -To Be Continued-]]></content>
      <categories>
        <category>Code Review</category>
      </categories>
      <tags>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Behind-the-Scenes Secrets of Jsoup I: Introduction]]></title>
    <url>%2FBehind-the-Scenes-Secrets-of-Jsoup-01-Introduction%2F</url>
    <content type="text"><![CDATA[Jsoup would probably be the most popular “working with real-world HTML” library in the Java community. I’ve been using it for web crawler stuff since 1.7.3(latest release is 1.11.3), but a little bit surprised to see that there is little introduction or analysis regarding its source code and implementations. Since I will use Jsoup as an example for OOP course(SE500) I would teach at Olivet Institute of Technology from Jan 2019, I tried to summarize the most important ideas behind-the-scene so that at least I know what I will talk about.😅These series were inspired from jsoup-learning and reused some graphs from it. Many thanks for Yihua Huang‘s digging into this beautiful library. This is the first part of the series. I will give a brief introduction about features of Jsoup and its general code structure. After that, I will analyze the DOM parser and CSS selector implementation mechanism, plus with some interesting tips and tricks in following articles. Jsoup is developed by Jonathan Hedley, a Senior Manager of Software Development at Amazon. According to the change logs, the initial beta was released at Jan 31, 2010, so it has been about 9 years till now! He is still maintaining the code base regularly, though not that actively as before. It might be due to “jsoup is in general, stable release” as he said. I use the latest version 1.12.1-SNAPSHOT for these series. It’s a Maven project without any external dependencies, though it introduced junit, gson, and jetty for unit test and integration test usage. According to the statistic result of cloc, there are 68 Java source files under src\main\java, 12015 lines of code, 4177 lines of comment and 1991 blank lines. As a library with good test coverage, there are 46 Java source files under src\test\java, with 7911 lines of code, 350 lines of comment and 1672 blank lines. The percentage of test code against production code is 65.8%, which is pretty good. As for test coverage, Intellij IDEA code coverage runner gives the report in the below, which is also impressive. Package Class, % Method, % Line, % org.jsoup 98% (229/233) 87% (1269/1457) 83% (6135/7317) org.jsoup.helper 100% (11/11) 79% (138/174) 83% (692/824) org.jsoup.internal 100% (3/3) 100% (27/27) 95% (141/147) org.jsoup.nodes 96% (31/32) 87% (356/407) 88% (1286/1455) org.jsoup.parser 100% (114/114) 91% (490/535) 79% (2924/3699) org.jsoup.safety 100% (9/9) 100% (44/44) 95% (286/300) org.jsoup.select 100% (58/58) 81% (193/237) 92% (772/836) You may find that package org.jsoup.examples is missing here. Since it is used as a showcase, it’s reasonable that there is no need to write tests against them, thus I exclude it. It might be better to remove them out of production code and extract to another project with more examples covering most frequent scenarios - just in my opinion. As a widely used library aiming at “working with real-world HTML”, the higher the test coverage is, the better. I’ve heard that Evan You, author of Vue.js, even achieved 100% unit test coverage! 669 test cases make sure Jsoup stay at good status - but this still cannot prevent new issues happen. Anyway, real-world is always a crazy world, go to the test cases and you will believe what I said. For example, &lt;p =a&gt;One&lt;a &lt;p&gt;Something&lt;/p&gt;Else, &lt;div id=1&lt;p id=&#39;2&#39;, what the hack is this? what should be the expected correct parsing result? Can you figure them out in 5 seconds?😭 Even though Jsoup is well covered by unit tests and maintains a high quality of implementation, you still need to be very careful when you prepare to upgrade to a new version - actually this is something to be self-evident - you just need more and more test cases to make your life easier. I remember very clearly in Dec 2016, some of my unit tests suddenly failed after I upgraded from 1.8.3 to 1.10.1 without doing anything else. Since my software was used by thousands of clients, I immediately report an issue in Github and rollback to 1.8.3 for a while, I just can’t imagine what will happen if I simply upgrade it, you know, some bugs just appear in certain circumstances and not easy to reproduce in normal functional tests. From the test coverage result, you will also get a whole picture of code structure. While jsoup providing convenient methods to submit HTTP requests and get responses, the most important parts are still under package org.jsoup.parse and org.jsoup.select. I will introduce them in the 2nd and 3rd articles of these series. The 5 lines of code in the below, covering most frequently used scenarios, are fairly clean, easy and simple, which only means Jsoup did quite a good job for its API user experience. 12345Document doc = Jsoup.connect("https://en.wikipedia.org").get();Elements newsHeadlines = doc.select("#mp-itn b a");for (Element headline : newsHeadlines) &#123; log("%s\n\t%s", headline.attr("title"), headline.absUrl("href"));&#125; Jsoup also provides a website for you to play around with its selector. Try Jsoup is the place where you can explore features of Jsoup without writing one line of code. It is also created for issue report. You can save the input, parameters, and output so that those who want to help you will go to the point much faster. For example, I want to retrieve all the post titles of Old Young Boys Club: http://try.jsoup.org/~iZFlhTQQAZnkXoPSCKrG4OisFcg. The upgrade issue I mentioned above also had a corresponding session link http://try.jsoup.org/~NOfOU7vXHAaHWhDnHv5qBIPtE1M still available today.👍 After you get familiar with the features of Jsoup, it’s time to go to source code to understand the mechanism. I would suggest you run class org.jsoup.examples.Wikipedia and debug the 5 lines of code above to see what actually happened step by step. Beware, it’s a long journey. If you get stuck you may also go over the test cases to understand what kind of problems the code will resolve - and how you would resolve. It’s also helpful to fork the repository and try to submit some pull requests, you may either pick up an issue and try to fix or make some minor enhancements. Actually, I just submitted Pull Requests #1157 and #1158 yesterday plus two issues: #1156 and #1159. I hope Jonathan would accept my PR and consider fixing these issues.😅 PS: Once there was a Japanese Samurai who submitted a Pull Request #564 at Apr 27, 2015, got approved and merged at Nov 19, 2017. He recorded this unforgettable experience in twitter. Thanks – better late than never :)&mdash; Jonathan Hedley (@jhy) November 20, 2017 -To Be Continued-]]></content>
      <categories>
        <category>Code Review</category>
      </categories>
      <tags>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NetBeans 10 Released: The Best Swing GUI Builder You Should Try]]></title>
    <url>%2FNetBeans-10-Released-The-Best-Swing-GUI-Builder-You-Should-Try%2F</url>
    <content type="text"><![CDATA[As a Java guy now I use IDEA most of the time, I’ve been using eclipse for about 6 years in the past but now I rarely open it. However, I still use NetBeans when I need to do some Swing stuff, as it provides the best GUI builder user experience in my perspective. From Sun to Oracle, now moving to Apache, after a long time of silence, Apache Netbeans 10.0 was released on Dec 27th, 2018. Wanna get a try, man? Besides Netbeans there is another distribution called CoolBeans, I first got to know this from Hacker News Show, which is a good marketplace to know the latest new stuff from programmers who want to present and promote their work. I would highly recommend you visit there regularly. Yesterday night I tried both NetBeans and CoolBeans, it’s similar to that of NetBeans 8.2, which I used for Swing GUI stuff. There is Window Builder for eclipse and IDEA ships GUI Designer itself, I actually tried them both at 2014 and 2016, and still, I found NetBeans is the best in this area. Nowadays the hot topic is cloud, apps, web and machine learning, desktop application is something you probably would never touch. As for me, in the first 3 years as a Java programmer I focused on JavaEE stuff, only when I started working for a start-up company at 2014, I have to build a desktop application to be deployed to thousands of clients. I never did that before but I managed to release the first usable version in 3 weeks, it would be impossible without Netbeans. From 2016 I started using JavaFX to build certain GUI applications, but in my personal experience I still prefer Swing - sounds strange, right? I will explain why in the future. Meanwhile, PyQT and WxPython in the Python community, Electron in Javascript community is also good stuff worthy to try. Once I played around with Electron and it would save you a lot of time as it will reuse your web development skills. I plan to summarize and share some of my Swing work to you guys in Github recently. Hope you guys enjoy! amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "oldyoungboy-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_asins = "B007Y6KIHI,1118385349,1617292842,0134393333"; amzn_assoc_linkid = "5e73b1f765df95a34faf76f5c40b63d0";]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>NetBeans</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chocolatey and Boxstarter: Setup Development Environment on Windows Like Never Before]]></title>
    <url>%2FChocolatey-and-Boxstarter%2F</url>
    <content type="text"><![CDATA[How many times have you googled “jdk download windows”, then download, click, click, and click? You don’t have to be like this even if you are using Windows. Chocolatey and Boxstarter are gospel for Windows users. Below is just an example: One Command To Install Them All! 1cinst jdk8 jdk11 git intellijidea-community vscode nodejs everything f.lux -y Install Chocolatey is super easy. Simply follow the instructions will do. Me usually choose the first option “install with cmd.exe(Run as Administrator)”, you just need to execute the command in the below, and you will get the Windows version apt-get:1@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin" Wanna upgrade? choco upgrade chocolatey You may explore 6161 community maintained packages and build your own toolkit scripts. I’ve found it to be super useful when I need to setup development environment in bunches of different computers in a short time without any mistake. As sometimes I just cannot reproduce some tricky bugs in my own laptop and have to investigate in end user’s computer. You can be even happier using Boxstarter, it’s very straightforward and easy to use also. Honestly speaking, I didn’t dive into these two tools deeply as I found the most frequently used commands would resolve my problem perfectly. If you use Windows as daily development environment, I highly recommend you to automate your setup process using them. Yeah! Happy Coding! You may also access the gist created for this post.]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Chocolatey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5 GitHub Repositories That Will Make Your Day]]></title>
    <url>%2F5-Github-Repositories-That-Will-Make-Your-Day%2F</url>
    <content type="text"><![CDATA[If by life you were deceived, don’t be dismal, don’t be wild! Access these GitHub repositories, they will make your day definitely! #1 nocode“No code is the best way to write secure and reliable applications. Write nothing; deploy nowhere.“ 24868 stars, 2126 forks, 2097 issues, and 349 pull requests. This project will be the most serious project you’ve ever met and you will never forget about it. Many beast programmers around the world are involved actively in this project. Fork it. Report an issue. Submit a Pull Request. That’s it. As for contributing, “You don’t”. #2 RFC 863(Discard Protocol)This will be the most powerful, elegant while easy to implement protocol you’ve never heard. “One discard service is defined as a connection based application on TCP. A server listens for TCP connections on TCP port 9. Once a connection is established any data received is thrown away. No response is sent. This continues until the calling user terminates the connection.” Implementations can be found at: tcp-discard-service, devnull.php. I highly recommend you to implement your own. #3 The F*ckI have to change something here, or this post will be blocked somewhere, complained about by someone. 39017 stars, 1923 forks. Compared to nocode, this tool is widely used by millions of programmers who are struggling to remember hundreds of commands every day. The best practice to use this command is typing and shouting, as loud as you can. #4 volkswagen“Volkswagen detects when your tests are being run in a CI server, and makes them pass”, then the author explains why: “If you want your software to be adopted by Americans, good tests scores from the CI server are very important. Volkswagen uses a defeat device to detect when it’s being tested in a CI server and will automatically reduce errors to an acceptable level for the tests to pass. This will allow you to spend less time worrying about testing and more time enjoying the good life as a trustful software developer.” #5 government.github.com“Gather, curate, and feature stories of public servants and civic hackers using GitHub as part of their open government innovations”, after that, you will get “Government like you’ve never imagined”. What the hack? Could this be true? Yes, it is. Argentina, Australia, and other countries are involved in this project now. Simply AWESOME! It sets a high standard regarding code and politics that few can catch up with. Update: Previously I planned to collect top 10 most funny Github repositories, however, when I review the other 5 repositories I don’t think they will make you laugh to tears, at least I won’t. So I changed the title of this post to ‘5 Github Repositories Will Make Your Day’ and I firmly believe they will make your day. Enjoy!😂 PS: This article was approved and published at DZone on Dec 17, 2018. DZone editor made some slight changes against my version. Click Here To Read. amzn_assoc_placement = "adunit0"; amzn_assoc_search_bar = "false"; amzn_assoc_tracking_id = "oldyoungboy-20"; amzn_assoc_ad_mode = "manual"; amzn_assoc_ad_type = "smart"; amzn_assoc_marketplace = "amazon"; amzn_assoc_region = "US"; amzn_assoc_title = ""; amzn_assoc_linkid = "1c02f241ba3958d4210ebd3b22671eef"; amzn_assoc_asins = "1484200772,B01GO8ZVFA,0132350882,1449331920";]]></content>
      <categories>
        <category>Funny</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
